name: Deploy Angular Project to GitHub

on:
  push:
    branches:
      - master

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    env:
      DEMO_APP_FOLDER_NAME: ng-error-tooltips-demo
      DEMO_PROJECT_NAME: ng-error-tooltips-demo
      LIB_FOLDER_NAME: ng-error-tooltips-lib
      LIB_NAME: ng-error-tooltips

    steps:
      - name: Set TARGET_BRANCH variable
        run: echo "TARGET_BRANCH=${GITHUB_REF_NAME}" >> $GITHUB_ENV

      - uses: actions/checkout@v4
        with:
          ref: ${{ env.TARGET_BRANCH }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Ensure `gh-pages` branch exists
        run: |
          if ! git ls-remote --exit-code --heads origin gh-pages; then
            echo "Creating gh-pages branch..."
            git checkout --orphan gh-pages
            git rm -rf .
            git commit --allow-empty -m "Initialize gh-pages branch"
            git push origin gh-pages
            git checkout ${{ env.TARGET_BRANCH }}
          else
            echo "gh-pages branch already exists."
          fi

      - name: Identify latest 'v'-prefixed tag
        run: |
          git fetch --prune --unshallow -v origin ${{ env.TARGET_BRANCH }}
          git fetch --depth=1 -v origin +refs/tags/*:refs/tags/* --tags

          LATEST_DEPLOYED_VERSION=$(git tag -l "v*" | sort -V | tail -n1)
          LATEST_DEPLOYED_VERSION=${LATEST_DEPLOYED_VERSION#v} # Remove 'v' prefix
          
          if [ -z "$LATEST_DEPLOYED_VERSION" ]; then
            echo "No previous versions found. Setting initial version."
            LATEST_DEPLOYED_VERSION="0.0.0"
          fi

          echo "LATEST_DEPLOYED_VERSION=${LATEST_DEPLOYED_VERSION}" >> $GITHUB_ENV

      - name: Build and link ng-error-tooltips
        run: |
          (cd ./${{ env.LIB_FOLDER_NAME }} && npm install && npm run build && npm link)
          (cd ./${{ env.DEMO_APP_FOLDER_NAME }} && npm link ${{ env.LIB_NAME }})

      - name: Install Dependencies
        run: npm install
        working-directory: ./${{ env.DEMO_APP_FOLDER_NAME }}

      - name: Run Tests
        run: npm run test:ci
        working-directory: ./${{ env.DEMO_APP_FOLDER_NAME }}

      - name: Check if Deployment is Needed
        id: version_check
        run: |
          PACKAGE_NAME=$(jq -r '.name' package.json)
          CURRENT_VERSION=$(jq -r '.version' package.json)
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

          git fetch --prune --unshallow origin +refs/tags/*:refs/tags/* --tags
          TAGS_WITH_DEMO=$(git tag -l "v*-demo" || true)
          LATEST_DEPLOYED_VERSION_WITH_DEMO=$(echo "$TAGS_WITH_DEMO" | sort -V | tail -n1)

          LATEST_DEPLOYED_VERSION=${LATEST_DEPLOYED_VERSION_WITH_DEMO%-demo}
          LATEST_DEPLOYED_VERSION=${LATEST_DEPLOYED_VERSION#v}

          echo "Latest Deployed Version: $LATEST_DEPLOYED_VERSION"

          if [ -z "$LATEST_DEPLOYED_VERSION" ] || [ "$(printf '%s\n' "$LATEST_DEPLOYED_VERSION" "$CURRENT_VERSION" | sort -V | head -n1)" != "$CURRENT_VERSION" ]; then
            echo "deploy_needed=true" >> $GITHUB_ENV
          else
            echo "deploy_needed=false" >> $GITHUB_ENV
          fi
        working-directory: ./${{ env.DEMO_APP_FOLDER_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Angular Project
        if: env.deploy_needed == 'true'
        run: npm run deploy
        working-directory: ./${{ env.DEMO_APP_FOLDER_NAME }}

      - name: Deploy to GitHub Pages
        if: env.deploy_needed == 'true'
        uses: JamesIves/github-pages-deploy-action@v4.5.0
        with:
          branch: gh-pages
          folder: ${{ env.DEMO_APP_FOLDER_NAME }}/dist/${{ env.DEMO_PROJECT_NAME }}/browser
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'ðŸš€ v${{ env.CURRENT_VERSION }} deployed to GitHub Pages'

      - name: Set a new tag
        if: env.deploy_needed == 'true' && success()
        run: |
          git tag v${{ env.CURRENT_VERSION }}-demo
          git push origin v${{ env.CURRENT_VERSION }}-demo
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
